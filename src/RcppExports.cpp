// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_printDensity
StringVector c_printDensity(int n, IntegerVector val, Rcpp::List const& params, int dtype, bool latex);
RcppExport SEXP _finitization_c_printDensity(SEXP nSEXP, SEXP valSEXP, SEXP paramsSEXP, SEXP dtypeSEXP, SEXP latexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type latex(latexSEXP);
    rcpp_result_gen = Rcpp::wrap(c_printDensity(n, val, params, dtype, latex));
    return rcpp_result_gen;
END_RCPP
}
// c_d
NumericVector c_d(int n, IntegerVector val, Rcpp::List const& params, int dtype);
RcppExport SEXP _finitization_c_d(SEXP nSEXP, SEXP valSEXP, SEXP paramsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(c_d(n, val, params, dtype));
    return rcpp_result_gen;
END_RCPP
}
// rvalues
IntegerVector rvalues(int n, Rcpp::List const& params, int no, int dtype);
RcppExport SEXP _finitization_rvalues(SEXP nSEXP, SEXP paramsSEXP, SEXP noSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type no(noSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(rvalues(n, params, no, dtype));
    return rcpp_result_gen;
END_RCPP
}
// MFPS_pdf
String MFPS_pdf(int n, Rcpp::List const& params, int dtype);
RcppExport SEXP _finitization_MFPS_pdf(SEXP nSEXP, SEXP paramsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(MFPS_pdf(n, params, dtype));
    return rcpp_result_gen;
END_RCPP
}
// getPoissonType
int getPoissonType();
RcppExport SEXP _finitization_getPoissonType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getPoissonType());
    return rcpp_result_gen;
END_RCPP
}
// getNegativeBinomialType
int getNegativeBinomialType();
RcppExport SEXP _finitization_getNegativeBinomialType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNegativeBinomialType());
    return rcpp_result_gen;
END_RCPP
}
// getBinomialType
int getBinomialType();
RcppExport SEXP _finitization_getBinomialType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getBinomialType());
    return rcpp_result_gen;
END_RCPP
}
// getLogarithmicType
int getLogarithmicType();
RcppExport SEXP _finitization_getLogarithmicType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getLogarithmicType());
    return rcpp_result_gen;
END_RCPP
}
// check_symbolic_equivalence
bool check_symbolic_equivalence(std::string expr1_str, std::string expr2_str);
RcppExport SEXP _finitization_check_symbolic_equivalence(SEXP expr1_strSEXP, SEXP expr2_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type expr1_str(expr1_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type expr2_str(expr2_strSEXP);
    rcpp_result_gen = Rcpp::wrap(check_symbolic_equivalence(expr1_str, expr2_str));
    return rcpp_result_gen;
END_RCPP
}
