// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rbinom
IntegerVector rbinom(int n, double p, int N, unsigned no);
RcppExport SEXP _finitization_rbinom(SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned >::type no(noSEXP);
    rcpp_result_gen = Rcpp::wrap(rbinom(n, p, N, no));
    return rcpp_result_gen;
END_RCPP
}
// MFPS_binom_pdf
String MFPS_binom_pdf(int n, int N);
RcppExport SEXP _finitization_MFPS_binom_pdf(SEXP nSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(MFPS_binom_pdf(n, N));
    return rcpp_result_gen;
END_RCPP
}
// c_dbinom
double c_dbinom(int n, double p, int N, double val);
RcppExport SEXP _finitization_c_dbinom(SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dbinom(n, p, N, val));
    return rcpp_result_gen;
END_RCPP
}
// rlog
IntegerVector rlog(int n, double theta, unsigned no);
RcppExport SEXP _finitization_rlog(SEXP nSEXP, SEXP thetaSEXP, SEXP noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type no(noSEXP);
    rcpp_result_gen = Rcpp::wrap(rlog(n, theta, no));
    return rcpp_result_gen;
END_RCPP
}
// MFPS_log_pdf
String MFPS_log_pdf(int n);
RcppExport SEXP _finitization_MFPS_log_pdf(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MFPS_log_pdf(n));
    return rcpp_result_gen;
END_RCPP
}
// c_dlog
double c_dlog(int n, double theta, double val);
RcppExport SEXP _finitization_c_dlog(SEXP nSEXP, SEXP thetaSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dlog(n, theta, val));
    return rcpp_result_gen;
END_RCPP
}
// rnegbinom
IntegerVector rnegbinom(int n, double p, int k, unsigned no);
RcppExport SEXP _finitization_rnegbinom(SEXP nSEXP, SEXP pSEXP, SEXP kSEXP, SEXP noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned >::type no(noSEXP);
    rcpp_result_gen = Rcpp::wrap(rnegbinom(n, p, k, no));
    return rcpp_result_gen;
END_RCPP
}
// MFPS_negbinom_pdf
String MFPS_negbinom_pdf(int n, int k);
RcppExport SEXP _finitization_MFPS_negbinom_pdf(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MFPS_negbinom_pdf(n, k));
    return rcpp_result_gen;
END_RCPP
}
// c_dnegbinom
double c_dnegbinom(int n, double p, int k, double val);
RcppExport SEXP _finitization_c_dnegbinom(SEXP nSEXP, SEXP pSEXP, SEXP kSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dnegbinom(n, p, k, val));
    return rcpp_result_gen;
END_RCPP
}
// rpois
IntegerVector rpois(int n, double theta, unsigned no);
RcppExport SEXP _finitization_rpois(SEXP nSEXP, SEXP thetaSEXP, SEXP noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type no(noSEXP);
    rcpp_result_gen = Rcpp::wrap(rpois(n, theta, no));
    return rcpp_result_gen;
END_RCPP
}
// MFPS_pois_pdf
String MFPS_pois_pdf(int n);
RcppExport SEXP _finitization_MFPS_pois_pdf(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MFPS_pois_pdf(n));
    return rcpp_result_gen;
END_RCPP
}
// c_printDensity
StringVector c_printDensity(int n, IntegerVector val, Rcpp::List const& params, int dtype, bool latex);
RcppExport SEXP _finitization_c_printDensity(SEXP nSEXP, SEXP valSEXP, SEXP paramsSEXP, SEXP dtypeSEXP, SEXP latexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type latex(latexSEXP);
    rcpp_result_gen = Rcpp::wrap(c_printDensity(n, val, params, dtype, latex));
    return rcpp_result_gen;
END_RCPP
}
// c_d
NumericVector c_d(int n, IntegerVector val, Rcpp::List const& params, int dtype);
RcppExport SEXP _finitization_c_d(SEXP nSEXP, SEXP valSEXP, SEXP paramsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(c_d(n, val, params, dtype));
    return rcpp_result_gen;
END_RCPP
}
// getPoissonType
int getPoissonType();
RcppExport SEXP _finitization_getPoissonType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getPoissonType());
    return rcpp_result_gen;
END_RCPP
}
// getNegativeBinomialType
int getNegativeBinomialType();
RcppExport SEXP _finitization_getNegativeBinomialType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNegativeBinomialType());
    return rcpp_result_gen;
END_RCPP
}
// getBinomialType
int getBinomialType();
RcppExport SEXP _finitization_getBinomialType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getBinomialType());
    return rcpp_result_gen;
END_RCPP
}
// getLogarithmicType
int getLogarithmicType();
RcppExport SEXP _finitization_getLogarithmicType() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getLogarithmicType());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_finitization_rbinom", (DL_FUNC) &_finitization_rbinom, 4},
    {"_finitization_MFPS_binom_pdf", (DL_FUNC) &_finitization_MFPS_binom_pdf, 2},
    {"_finitization_c_dbinom", (DL_FUNC) &_finitization_c_dbinom, 4},
    {"_finitization_rlog", (DL_FUNC) &_finitization_rlog, 3},
    {"_finitization_MFPS_log_pdf", (DL_FUNC) &_finitization_MFPS_log_pdf, 1},
    {"_finitization_c_dlog", (DL_FUNC) &_finitization_c_dlog, 3},
    {"_finitization_rnegbinom", (DL_FUNC) &_finitization_rnegbinom, 4},
    {"_finitization_MFPS_negbinom_pdf", (DL_FUNC) &_finitization_MFPS_negbinom_pdf, 2},
    {"_finitization_c_dnegbinom", (DL_FUNC) &_finitization_c_dnegbinom, 4},
    {"_finitization_rpois", (DL_FUNC) &_finitization_rpois, 3},
    {"_finitization_MFPS_pois_pdf", (DL_FUNC) &_finitization_MFPS_pois_pdf, 1},
    {"_finitization_c_printDensity", (DL_FUNC) &_finitization_c_printDensity, 5},
    {"_finitization_c_d", (DL_FUNC) &_finitization_c_d, 4},
    {"_finitization_getPoissonType", (DL_FUNC) &_finitization_getPoissonType, 0},
    {"_finitization_getNegativeBinomialType", (DL_FUNC) &_finitization_getNegativeBinomialType, 0},
    {"_finitization_getBinomialType", (DL_FUNC) &_finitization_getBinomialType, 0},
    {"_finitization_getLogarithmicType", (DL_FUNC) &_finitization_getLogarithmicType, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_finitization(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
