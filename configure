#!/bin/sh
# configure script for CRAN‐safe fallback static linking of GMP, CLN, and GiNaC
# with explicit C++11 for macOS Intel and C++14 otherwise

set -e

# 1. Detect OS
UNAME_S=$(uname -s)
case "$UNAME_S" in
  Darwin)   OS=macos ;;
  MINGW*| MSYS*| CYGWIN*)  OS=windows ;;
  Linux)    OS=linux ;;
  *)        OS=unknown ;;
esac

if [ "$OS" = "macos" ]; then
  # ensure we target at least 11.0 to match our .a’s LC_VERSION_MIN
  CPPFLAGS="-mmacosx-version-min=11.0 $CPPFLAGS"
  LDFLAGS="-mmacosx-version-min=11.0 $LDFLAGS"
  export CPPFLAGS LDFLAGS
fi

# 2. Detect architecture
if [ "$OS" = "windows" ]; then
  ARCHDIR=${R_ARCH:-x64}
else
  ARCHDIR=$(uname -m)  # arm64 or x86_64
fi

echo "Configuring for $OS / $ARCHDIR"

CPPFLAGS=""
LDFLAGS=""
USE_FALLBACK=0

# 3. Try pkg-config
if command -v pkg-config >/dev/null 2>&1; then
  echo "Using pkg-config to locate GMP, CLN, and GiNaC..."
  if pkg-config --exists gmp cln ginac; then
    PKG_FLAGS=$(pkg-config --cflags --libs gmp cln ginac)
    CPPFLAGS=$(echo "$PKG_FLAGS" | awk '{ for(i=1;i<=NF;i++) if ($i ~ /^-I/) printf "%s ", $i }')
    LDFLAGS=$(echo "$PKG_FLAGS" | awk '{ for(i=1;i<=NF;i++) if ($i ~ /^-L|^-l/) printf "%s ", $i }')
  else
    echo "Required pkg-config packages not found."
    if [ "$OS" = "macos" ]; then
      echo "macOS detected: attempting Homebrew install..."
      if command -v brew >/dev/null 2>&1; then
        if brew install gmp cln ginac; then
          echo "Homebrew install succeeded; retrying pkg-config..."
          if pkg-config --exists gmp cln ginac; then
            PKG_FLAGS=$(pkg-config --cflags --libs gmp cln ginac)
            CPPFLAGS=$(echo "$PKG_FLAGS" | awk '{ for(i=1;i<=NF;i++) if ($i ~ /^-I/) printf "%s ", $i }')
            LDFLAGS=$(echo "$PKG_FLAGS" | awk '{ for(i=1;i<=NF;i++) if ($i ~ /^-L|^-l/) printf "%s ", $i }')
          else
            echo "pkg-config still cannot find libraries after brew."
            USE_FALLBACK=1
          fi
        else
          echo "brew install failed; falling back to static libraries."
          USE_FALLBACK=1
        fi
      else
        echo "Homebrew not installed; falling back to static libraries."
        USE_FALLBACK=1
      fi
    else
      echo "Non‐macOS or no package manager: falling back to static libraries."
      USE_FALLBACK=1
    fi
  fi
else
  echo "pkg-config not available; falling back to static libraries."
  USE_FALLBACK=1
fi

# 4. Fallback static linking
if [ "$USE_FALLBACK" -eq 1 ]; then
  echo "Using bundled static libraries."
  CPPFLAGS="-I../inst/include"
  LDFLAGS="../inst/extlibs/$ARCHDIR/libginac.a \
           ../inst/extlibs/$ARCHDIR/libcln.a  \
           ../inst/extlibs/$ARCHDIR/libgmp.a"
fi

# 5. Decide which C++ standard to ask R to use
if [ "$OS" = "macos" ] && [ "$ARCHDIR" = "x86_64" ]; then
  CXXSTD="CXX11"
  echo "  Will request C++11 on macOS Intel"
else
  CXXSTD="CXX14"
  echo "  Will request C++14 elsewhere"
fi

# Append C++ standard flag
CPPFLAGS="$CPPFLAGS $STD_FLAG"

# Dedupe linker flags
LDFLAGS=$(printf "%s\n" $LDFLAGS | awk '!seen[$0]++' | tr '\n' ' ')

# 6. Write src/Makevars
cat > src/Makevars <<EOF
CXX_STD = $CXXSTD
PKG_CPPFLAGS = $CPPFLAGS
PKG_CXXFLAGS += -O3 -fno-math-errno -DNDEBUG
PKG_LIBS = $LDFLAGS
EOF

# 7. Write src/Makevars.win
cat > src/Makevars.win <<EOF
CXX_STD = $CXXSTD
PKG_CPPFLAGS = $CPPFLAGS
PKG_CXXFLAGS += -O3 -fno-math-errno -DNDEBUG
PKG_LIBS = $LDFLAGS
EOF

echo "Configuration complete."
echo "  CPPFLAGS: $CPPFLAGS"
echo "  LDFLAGS:  $LDFLAGS"
