#!/bin/sh
set -e

# --- Basics ---------------------------------------------------------------
PKG_ROOT=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)
UNAME_S=$(uname -s)
UNAME_M=$(uname -m)
case "$UNAME_S" in
  Darwin) OS=macos ;;
  Linux)  OS=linux ;;
  *)      OS=other ;;
esac


# Block webR / WASM
if ${CC:-cc} --version 2>/dev/null | grep -qi emscripten; then
  echo "ERROR: webR/WASM not supported." >&2
  exit 1
fi

# macOS deployment target
if [ "$OS" = "macos" ]; then
  CPPFLAGS="-mmacosx-version-min=11.0 ${CPPFLAGS:-}"
  LDFLAGS="-mmacosx-version-min=11.0 ${LDFLAGS:-}"
  export CPPFLAGS LDFLAGS
fi

# Detect CRAN build
ON_CRAN=0
if [ "${_R_CHECK_CRAN_INCOMING_:-}" = "TRUE" ] || [ "${CRAN_BUILD:-}" = "true" ]; then
  ON_CRAN=1
fi

PKG_CONFIG="${PKG_CONFIG:-pkg-config}"

# Flags to enable dead-code elimination
PKG_CFLAGS_SECTIONS="-DNDEBUG"
PKG_CXXFLAGS_SECTIONS="-DNDEBUG"
if [ "$OS" = "linux" ]; then
  # Needed to link static archives into a shared object on Linux
  PKG_CFLAGS_SECTIONS="$PKG_CFLAGS_SECTIONS -fPIC"
  PKG_CXXFLAGS_SECTIONS="$PKG_CXXFLAGS_SECTIONS -fPIC"
fi

PKG_CPPFLAGS=""
PKG_CFLAGS="$PKG_CFLAGS_SECTIONS"
PKG_CXXFLAGS="$PKG_CXXFLAGS_SECTIONS"
PKG_LIBS=""


echo "configure: OS=$OS ARCH=$UNAME_M CRAN=$ON_CRAN"

# Try pkg-config
if ! command -v "$PKG_CONFIG" >/dev/null 2>&1; then
  cat >&2 <<'EOM'
ERROR: 'pkg-config' was not found.
Please install pkg-config and the development packages for GMP, CLN, and GiNaC.
  - Debian/Ubuntu: sudo apt-get install -y pkg-config libgmp-dev libcln-dev libginac-dev
  - Fedora:        sudo dnf install pkgconf-pkg-config gmp-devel cln-devel ginac-devel
  - openSUSE:      sudo zypper install pkgconf-pkg-config gmp-devel cln-devel ginac-devel
  - macOS (Homebrew): brew install pkg-config gmp cln ginac
EOM
  exit 1
fi

# --- Preferred: system libs via pkg-config -------------------------------
if "$PKG_CONFIG" --exists gmp cln2 ginac3; then
    echo "configure: Found GMP/CLN/GiNaC via pkg-config."
    PKG_CPPFLAGS=$("$PKG_CONFIG" --cflags gmp cln ginac)
    PKG_LIBS=$("$PKG_CONFIG" --libs   gmp cln ginac)
    echo "  PKG_CPPFLAGS: $PKG_CPPFLAGS"
    echo "  PKG_LIBS: $PKG_LIBS"
# --- Fallback policy ------------------------------------------------------
else
    if [ "$ON_CRAN" -eq 1 ]; then
        cat >&2 <<'EOM'
ERROR: pkg-config could not locate GMP/CLN/GiNaC on CRAN.
Please ensure these dev packages are installed and visible to pkg-config:
 - Debian/Ubuntu: sudo apt-get install -y pkg-config libgmp-dev libcln-dev libginac-dev
 - Fedora:        sudo dnf install      pkgconf-pkg-config gmp-devel cln-devel ginac-devel
 - openSUSE:      sudo zypper install   pkgconf-pkg-config gmp-devel cln-devel ginac-devel
 - macOS:         brew install pkg-config gmp cln ginac
EOM
        exit 1
    fi

    # Off CRAN: unconditionally fetch bundled **shared** libs for this OS/arch
    case "$OS:$UNAME_M" in
        linux:x86_64)
            BURL="https://github.com/bogdanoancea/finitization-linuxlibs/releases/download/v1.0.0/finitization-x86_64-gmp+cln+ginac-shared.zip"
            BDIR="$PKG_ROOT/extlibs/linux/x86_64"
            ;;
        linux:aarch64|linux:arm64)
            BURL="https://github.com/bogdanoancea/finitization-linuxlibs/releases/download/v1.0.0/finitization-aarch64-gmp+cln+ginac-shared.zip"
            BDIR="$PKG_ROOT/extlibs/linux/aarch64"
            ;;
        macos:x86_64)
            BURL="https://github.com/bogdanoancea/finitization-macoslibs/releases/download/v1.0.0/finitization-x86_64-gmp+cln+ginac-shared.zip"
            BDIR="$PKG_ROOT/extlibs/macos/x86_64"
            ;;
        macos:arm64)
            BURL="https://github.com/bogdanoancea/finitization-macoslibs/releases/download/v1.0.0/finitization-arm64-gmp+cln+ginac-static.zip"
            BDIR="$PKG_ROOT/extlibs/macos/arm64"
            ;;
        *)
            echo "ERROR: No bundle available for $OS/$UNAME_M." >&2
            exit 1
            ;;
    esac

    mkdir -p "$PKG_ROOT/extlibs" "$BDIR" "$PKG_ROOT/inst/include"
    ZIP="$PKG_ROOT/extlibs/$(basename "$BURL")"
    echo "configure: Falling back to static bundles: $BURL"



    if command -v curl >/dev/null 2>&1; then
        curl -L -o "$ZIP" "$BURL"
    elif command -v wget >/dev/null 2>&1; then
        wget -q -O "$ZIP" "$BURL"
    else
        echo "ERROR: need curl or wget to download bundles." >&2
        exit 1
    fi

    unzip -oq "$ZIP" -d "$PKG_ROOT/extlibs"

    # Link statically by naming the archives explicitly
    PKG_CPPFLAGS="-I$BDIR/include -DNDEBUG"

    GINAC_A="$BDIR/lib/libginac.a"
    CLN_A="$BDIR/lib/libcln.a"
    GMP_A="$BDIR/lib/libgmp.a"

    for f in "$GINAC_A" "$CLN_A" "$GMP_A"; do
    [ -f "$f" ] || { echo "ERROR: Missing static archive: $f" >&2; exit 1; }
    done

    PKG_LIBS="$GINAC_A $CLN_A $GMP_A"
    # Dead code stripping (platform-specific)

fi



# --- C++ standard (no -O flags in PKG_*FLAGS for CRAN) -------------------
if [ "$OS" = "macos" ] && [ "$UNAME_M" = "x86_64" ]; then
  CXXSTD="CXX11"
else
  CXXSTD="CXX14"
fi
PKG_CXXFLAGS="-DNDEBUG"


# Dedupe linker flags
LDFLAGS=$(printf "%s\n" $LDFLAGS | awk '!seen[$0]++' | tr '\n' ' ')

# DCE at final link step (platform specific)
case "$UNAME_S" in
  Linux)  PKG_LIBS="$PKG_LIBS -Wl,--gc-sections" ;;
  Darwin) PKG_LIBS="$PKG_LIBS -Wl,-dead_strip" ;;
  MINGW*|MSYS*) PKG_LIBS="$PKG_LIBS -Wl,--gc-sections" ;;
esac

# Write src/Makevars (avoid LDFLAGS here; CRAN prefers PKG_* vars only)
mkdir -p src
cat > src/Makevars <<EOF
CXX_STD      = $CXXSTD
PKG_CPPFLAGS = $PKG_CPPFLAGS
PKG_CFLAGS   = $PKG_CFLAGS
PKG_CXXFLAGS = $PKG_CXXFLAGS
PKG_LIBS     = $PKG_LIBS
EOF

cat > src/Makevars.win <<EOF
CXX_STD      = $CXXSTD
PKG_CPPFLAGS = $PKG_CPPFLAGS
PKG_CFLAGS   = $PKG_CFLAGS
PKG_CXXFLAGS = $PKG_CXXFLAGS
PKG_LIBS     = $PKG_LIBS
EOF

echo "configure: done."
echo "  PKG_CPPFLAGS: $PKG_CPPFLAGS"
echo "  PKG_CFLAGS:   $PKG_CFLAGS"
echo "  PKG_CXXFLAGS: $PKG_CXXFLAGS"
echo "  PKG_LIBS:     $PKG_LIBS"
