#!/bin/sh
set -e

PKG_ROOT=$(dirname "$0")
# Normalize to absolute path
PKG_ROOT=$(cd "$PKG_ROOT" && pwd)
echo $PKG_ROOT

# Detect OS
UNAME_S=$(uname -s)
case "$UNAME_S" in
  Darwin) OS=macos ;;
  Linux)  OS=linux ;;
  *)      OS=other ;;
esac

UNAME_M=$(uname -m)


#if [ "$UNAME_S" = "Linux" ] && [ "$UNAME_M" = "aaarch64" ]; then
#  cat >&2 <<'EOM'
#ERROR: finitization is not yet supported on Linux ARM64 (aarch64).
#Reason: the package depends on CLN/GiNaC/GMP, and we currently do not
#provide compatible prebuilt libraries for Linux/aarch64, and the upstream
#distros are not reliably installed by the builder on this architecture.

#This is intentional. Other platforms (x86_64 Linux, Windows, macOS incl. Apple Silicon)
#are supported.
#EOM
#  exit 1
#fi


# Block WebAssembly/webR early (emcc toolchain)
if ${CC:-cc} --version 2>/dev/null | grep -qi emscripten; then
  cat >&2 <<'EOM'
ERROR: finitization is not currently supported on WebAssembly / webR.
CLN/GiNaC rely on native CPU integer semantics that are not yet available in WASM.
EOM
  exit 1
fi

# macOS minimum deployment target
if [ "$OS" = "macos" ]; then
  CPPFLAGS="-mmacosx-version-min=11.0 $CPPFLAGS"
  LDFLAGS="-mmacosx-version-min=11.0 $LDFLAGS"
  export CPPFLAGS LDFLAGS
fi

PKG_CONFIG=${PKG_CONFIG:-pkg-config}

# Detect architecture
if [ "$OS" = "windows" ]; then
  ARCHDIR=${R_ARCH:-x64}
else
  ARCHDIR=$(uname -m)  # arm64 or x86_64 or aarch64
fi

echo "Configuring for $OS / $ARCHDIR"

CPPFLAGS=""
LDFLAGS=""

# Try pkg-config
if ! command -v "$PKG_CONFIG" >/dev/null 2>&1; then
  cat >&2 <<'EOM'
ERROR: 'pkg-config' was not found.
Please install pkg-config and the development packages for GMP, CLN, and GiNaC.
  - Debian/Ubuntu: sudo apt-get install -y pkg-config libgmp-dev libcln-dev libginac-dev
  - Fedora:        sudo dnf install pkgconf-pkg-config gmp-devel cln-devel ginac-devel
  - openSUSE:      sudo zypper install pkgconf-pkg-config gmp-devel cln-devel ginac-devel
  - macOS (Homebrew): brew install pkg-config gmp cln ginac
EOM
  exit 1
fi

if "$PKG_CONFIG" --exists gmp cln ginac; then
    PKG_CPPFLAGS=$("$PKG_CONFIG" --cflags gmp cln ginac)
    PKG_LIBS=$("$PKG_CONFIG" --libs   gmp cln ginac)
else
    if [ "$_R_CHECK_CRAN_INCOMING_" = "TRUE" ]; then
        cat >&2 <<'EOM'
ERROR: Could not find GMP/CLN/GiNaC via pkg-config.
Please install the development packages and ensure pkg-config can find them.
  - Debian/Ubuntu: sudo apt-get install -y libgmp-dev libcln-dev libginac-dev
  - Fedora:        sudo dnf install gmp-devel cln-devel ginac-devel
  - openSUSE:      sudo zypper install gmp-devel cln-devel ginac-devel
  - macOS (Homebrew): brew install gmp cln ginac
EOM
        exit 1
    else
        if [ "$UNAME_S" = "Linux" ] && [ "$UNAME_M" = "x86_64" ]; then
            # Optionally fetch prebuilt libs for linux build:
            BUNDLE_URL="https://github.com/bogdanoancea/finitization-linuxlibs/releases/download/v1.0.0/finitization-x86_64-gmp+cln+ginac-static.zip"
            VENDOR_TMP="${PKG_ROOT}/extlibs"
            mkdir -p "${VENDOR_TMP}"
            echo "DEBUG[configure]: fetching bundle from ${BUNDLE_URL}"
            if command -v curl >/dev/null 2>&1; then
                curl -L -o "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            elif command -v wget >/dev/null 2>&1; then
                wget -O "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            else
                cat >&2 <<'EOM'
ERROR: Neither curl nor wget found to download external libraries.
Please install curl or wget.
EOM
                exit 1
            fi
            echo "DEBUG[configure]: extracting bundle"
            if command -v unzip >/dev/null 2>&1; then
                unzip -o "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" -d "${VENDOR_TMP}"
            else
                echo "ERROR: unzip  isn't available on this system." >&2
                exit 1
            fi
            PKG_CPPFLAGS="-I${PKG_ROOT}/extlibs/linux/x86_64/include -DNDEBUG"
            PKG_LIBS="-L${PKG_ROOT}/extlibs/linux/x86_64/lib -lginac -lcln -lgmp"
        fi
        if [ "$UNAME_S" = "Linux" ] && [ "$UNAME_M" = "aarch64" ]; then
            # Optionally fetch prebuilt libs for linux build:
            BUNDLE_URL="https://github.com/bogdanoancea/finitization-linuxlibs/releases/download/v1.0.0/finitization-aarch64-gmp+cln+ginac-static.zip"
            VENDOR_TMP="${PKG_ROOT}/extlibs"
            mkdir -p "${VENDOR_TMP}"
            echo "DEBUG[configure]: fetching bundle from ${BUNDLE_URL}"
            if command -v curl >/dev/null 2>&1; then
                curl -L -o "${VENDOR_TMP}/finitization-aarch64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            elif command -v wget >/dev/null 2>&1; then
                wget -O "${VENDOR_TMP}/finitization-aarch64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            else
                cat >&2 <<'EOM'
ERROR: Neither curl nor wget found to download external libraries.
Please install curl or wget.
EOM
                exit 1
            fi
            echo "DEBUG[configure]: extracting bundle"
            if command -v unzip >/dev/null 2>&1; then
                unzip -o "${VENDOR_TMP}/finitization-aarch64-gmp+cln+ginac-static.zip" -d "${VENDOR_TMP}"
            else
                echo "ERROR: unzip  isn't available on this system." >&2
                exit 1
            fi
            PKG_CPPFLAGS="-I${PKG_ROOT}/extlibs/linux/aarch64/include -DNDEBUG"
            PKG_LIBS="-L${PKG_ROOT}/extlibs/linux/aarch64/lib -lginac -lcln -lgmp"
        fi

        if [ "$UNAME_S" = "Darwin" ] && [ "$UNAME_M" = "x86_64" ]; then
            # Optionally fetch prebuilt libs for macos build:
            BUNDLE_URL="https://github.com/bogdanoancea/finitization-macoslibs/releases/download/v1.0.0/finitization-x86_64-gmp+cln+ginac-static.zip"
            VENDOR_TMP="${PKG_ROOT}/extlibs"
            mkdir -p "${VENDOR_TMP}"
            echo "DEBUG[configure]: fetching bundle from ${BUNDLE_URL}"
            if command -v curl >/dev/null 2>&1; then
                curl -L -o "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            elif command -v wget >/dev/null 2>&1; then
                wget -O "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            else
                cat >&2 <<'EOM'
ERROR: Neither curl nor wget found to download external libraries.
Please install curl or wget.
EOM
                exit 1
            fi
            echo "DEBUG[configure]: extracting bundle"
            if command -v unzip >/dev/null 2>&1; then
                unzip -o "${VENDOR_TMP}/finitization-x86_64-gmp+cln+ginac-static.zip" -d "${VENDOR_TMP}"
            else
                echo "ERROR: unzip  isn't available on this system." >&2
                exit 1
            fi
            PKG_CPPFLAGS="-I${PKG_ROOT}/extlibs/macos/x86_64/include -DNDEBUG"
            PKG_LIBS="-L${PKG_ROOT}/extlibs/macos/x86_64/lib -lginac -lcln -lgmp"
        fi
        if [ "$UNAME_S" = "Darwin" ] && [ "$UNAME_M" = "arm64" ]; then
            # Optionally fetch prebuilt libs for macos arm64 build:
            BUNDLE_URL="https://github.com/bogdanoancea/finitization-macoslibs/releases/download/v1.0.0/finitization-arm64-gmp+cln+ginac-static.zip"
            VENDOR_TMP="${PKG_ROOT}/extlibs"
            mkdir -p "${VENDOR_TMP}"
            echo "DEBUG[configure]: fetching bundle from ${BUNDLE_URL}"
            if command -v curl >/dev/null 2>&1; then
                curl -L -o "${VENDOR_TMP}/finitization-arm64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            elif command -v wget >/dev/null 2>&1; then
                wget -O "${VENDOR_TMP}/finitization-arm64-gmp+cln+ginac-static.zip" "${BUNDLE_URL}"
            else
                cat >&2 <<'EOM'
ERROR: Neither curl nor wget found to download external libraries.
Please install curl or wget.
EOM
                exit 1
            fi
            echo "DEBUG[configure]: extracting bundle"
            if command -v unzip >/dev/null 2>&1; then
                unzip -o "${VENDOR_TMP}/finitization-arm64-gmp+cln+ginac-static.zip" -d "${VENDOR_TMP}"
            else
                echo "ERROR: unzip  isn't available on this system." >&2
                exit 1
            fi
            PKG_CPPFLAGS="-I${PKG_ROOT}/extlibs/macos/arm64/include -DNDEBUG"
            PKG_LIBS="-L${PKG_ROOT}/extlibs/macos/arm64/lib -lginac -lcln -lgmp"
        fi
    fi
fi

# Decide which C++ standard to ask R to use
if [ "$OS" = "macos" ] && [ "$ARCHDIR" = "x86_64" ]; then
  CXXSTD="CXX11"
  echo "  Will request C++11 on macOS Intel"
else
  CXXSTD="CXX14"
  echo "  Will request C++14"
fi

# Append C++ standard flag
CPPFLAGS="$CPPFLAGS $STD_FLAG"

# Dedupe linker flags
LDFLAGS=$(printf "%s\n" $LDFLAGS | awk '!seen[$0]++' | tr '\n' ' ')

# Safe optimization flags for CRAN
PKG_CPPFLAGS=$PKG_CPPFLAGS
PKG_CXXFLAGS=$PKG_CXXFLAGS
PKG_LIBS=$PKG_LIBS

# Write src/Makevars
cat > src/Makevars <<EOF
CXX_STD=$CXXSTD
PKG_CPPFLAGS=$PKG_CPPFLAGS
PKG_CXXFLAGS=$PKG_CXXFLAGS
PKG_CFLAGS=$PKG_CFLAGS
PKG_LIBS=$PKG_LIBS
EOF


# Write src/Makevars.win
cat > src/Makevars.win <<EOF
CXX_STD      = $CXXSTD
PKG_CPPFLAGS = $PKG_CPPFLAGS
PKG_CXXFLAGS = $PKG_CXXFLAGS
PKG_CFLAGS=$PKG_CFLAGS
PKG_LIBS     = $PKG_LIBS
EOF

echo "configure: Found GMP/CLN/GiNaC via pkg-config."
echo "Configuration complete."
echo "  CPPFLAGS: $CPPFLAGS"
echo "  LDFLAGS:  $LDFLAGS"
